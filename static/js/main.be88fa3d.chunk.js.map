{"version":3,"sources":["Count.js","Button.js","Buttons.js","Settings.js","reducer.js","App.js","store.js","index.js"],"names":["Count","props","className","redNumber","sizeOfString","value","Button","disabled","error","onClick","handleOnClick","title","Buttons","onPlus","onReset","count","Settings","redMaxCountInput","maxCount","minCount","redStartCountInput","type","onChange","onMaxChange","onMinChange","onClickSet","editMode","ON_INCREMENT","ON_RESET","INCORRECT_VALUE","ON_CLICK_SET","initialState","App","state","onIncrement","setState","event","maxValue","target","onChangeMaxValue","onGetToSettings","incorrectValue","minValue","onChangeMinValue","onIncorrectValue","render","redCountInput","prevProps","prevState","this","React","Component","ConnectedApp","connect","dispatch","startCount","onResetAC","onChangeMaxValueAC","onChangeMinValueAC","onClickSetAC","store","createStore","action","Number","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.be88fa3d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction Count (props) {\n        return (\n            <div className={\"number\"}>\n              <div  className={`${props.redNumber} ${props.sizeOfString}`}>{props.value}</div>\n            </div>\n        );\n}\n\nexport default Count;\n","import React from 'react';\nimport './App.css';\n\n\nfunction Button (props) {\n        return (\n\n                <button disabled={props.error}\n                        onClick={props.handleOnClick}>{props.title}\n                </button>\n\n        );\n}\n\nexport default Button;\n","import React from 'react';\nimport './App.css';\nimport Button from \"./Button\";\n\n\nfunction Buttons (props) {\n\n        return (\n            <div className={\"buttons\"}>\n                <Button handleOnClick={props.onPlus}\n                        error={props.error}\n                        title={'inc'}/>\n                <Button handleOnClick={props.onReset}\n                        error={typeof(props.count) === 'string'}\n                        title={'reset'}/>\n            </div>\n\n        );\n}\n\n\n// handleOnClick={this.props.onReset}\n// error={typeof(this.props.count) === 'string'}\n// title={'reset'}\nexport default Buttons;\n","import React from 'react';\nimport './App.css';\nimport Button from \"./Button\";\n\nfunction Settings(props) {\n\nlet redMaxCountInput = props.maxCount <= props.minCount || props.minCount < 0 ? 'redInput' : ''\nlet redStartCountInput = props.maxCount <= props.minCount || props.minCount < 0 ? 'redInput' : ''\n//  let redCountInput = this.props.count === 'Incorrect value!' ? 'redInput' : ''\n\n    return (\n        <div>\n            <div className={\"values\"}>\n                <div>\n                    <span>max value:</span>\n                    <input type=\"number\"\n                           className={redMaxCountInput}\n                           value={props.maxCount}\n                           onChange={props.onMaxChange}/>\n                </div>\n                <div>\n                    <span>start value:</span>\n                    <input type=\"number\"\n                           className={redStartCountInput}\n                           value={props.minCount}\n                           onChange={props.onMinChange}/>\n                </div>\n            </div>\n            <div className={\"buttons\"}>\n                <Button handleOnClick={props.onClickSet}\n                        error={!props.editMode}\n                        title={'set'}/>\n            </div>\n        </div>\n    );\n}\n\nexport default Settings;\n","export const ON_INCREMENT = 'Counter/Reducer/ON-INCREMENT'\r\nexport const ON_RESET = 'Counter/Reducer/ON-RESET'\r\nexport const INCORRECT_VALUE = 'Counter/Reducer/INCORRECT-VALUE'\r\nexport const ON_CHANGE_MAX_VALUE = 'Counter/Reducer/ON-CHANGE-MAX-VALUE'\r\nexport const ON_CHANGE_MIN_VALUE = 'Counter/Reducer/ON-CHANGE-MIN-VALUE'\r\nexport const ON_GET_TO_SETTINGS = 'Counter/Reducer/ON-GET-TO-SETTINGS'\r\nexport const ON_CLICK_SET = 'Counter/Reducer/ON-CLICK-SET'\r\n\r\nconst initialState = {\r\n    // data: {\r\n    count: 0,\r\n    minCount: 0,\r\n    maxCount: 5,\r\n    error: false,\r\n    editMode: false\r\n    // }\r\n\r\n}\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ON_INCREMENT:\r\n            return {\r\n                ...state, count: state.count + 1\r\n\r\n                // data: {\r\n                //     ...state.data,\r\n                //     count: state.data.count + 1\r\n                // }\r\n\r\n                // if (state.count === state.maxCount) {\r\n                // ...state,\r\n                //         error:\r\n            }\r\n        case ON_RESET:\r\n            return {\r\n                ...state, count: action.startCount\r\n            }\r\n        case INCORRECT_VALUE:\r\n            return {\r\n                ...state, count: 'Incorrect value'\r\n            }\r\n        case ON_CHANGE_MAX_VALUE:\r\n            return {\r\n                ...state, maxCount: Number(action.maxCount)\r\n            }\r\n        case ON_CHANGE_MIN_VALUE:\r\n            return {\r\n                ...state, minCount: Number(action.minCount)\r\n            }\r\n        case ON_GET_TO_SETTINGS:\r\n            return {\r\n                ...state, count: \"Enter values and press 'set'\"\r\n            }\r\n            case ON_CLICK_SET:\r\n            return {\r\n                ...state, count: action.count\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\n\r\nexport const incrementCountAC = () => {\r\n    return {type: ON_INCREMENT}\r\n}\r\nexport const onResetAC = (startCount) => {\r\n    return {type: ON_RESET, startCount}\r\n}\r\nexport const onIncorrectValueAC = () => {\r\n    return {type: INCORRECT_VALUE}\r\n}\r\nexport const onChangeMaxValueAC = (maxCount) => {\r\n    return {type: ON_CHANGE_MAX_VALUE, maxCount}\r\n}\r\nexport const onChangeMinValueAC = (minCount) => {\r\n    return {type: ON_CHANGE_MIN_VALUE, minCount}\r\n}\r\nexport const onGetToSettingsAC = () => {\r\n    return {type: ON_GET_TO_SETTINGS}\r\n}\r\nexport const onClickSetAC = (count) => {\r\n    return {type: ON_CLICK_SET, count}\r\n}","import React from 'react';\nimport './App.css';\nimport Count from \"./Count\";\nimport Buttons from \"./Buttons\";\nimport Settings from \"./Settings\";\nimport {connect} from \"react-redux\";\nimport {\n    incrementCountAC,\n    onChangeMaxValueAC,\n    onChangeMinValueAC, onClickSetAC,\n    onGetToSettingsAC,\n    onIncorrectValueAC,\n    onResetAC\n} from \"./reducer\";\n\n\nclass App extends React.Component {\n    state = {\n        error: false,\n        // editMode: false\n    };\n\n    // componentDidMount() {\n    //     this.restoreState();\n    // }\n\n    // saveState = () => {\n    //     let maxStateAsString = JSON.stringify(this.state);\n    //     localStorage.setItem('max', maxStateAsString);\n    // };\n    //\n    // restoreState = () => {\n    //     let state = {\n    //         count: 0,\n    //         startCount: 0,\n    //         maxCount: 5,\n    //         error: false,\n    //         editMode: false\n    //     };\n    //     let maxStateAsString = localStorage.getItem('max');\n    //     if (maxStateAsString !== null) {\n    //         state = JSON.parse(maxStateAsString);\n    //     }\n    //     this.setState(state);\n    // };\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.count !== prevProps.count) {\n            if (this.props.count === this.props.maxCount) {\n                this.setState({\n                    error: true\n                })\n            }\n        }\n\n    }\n\n    onPlus = () => {\n        if (this.props.count < this.props.maxCount) {\n            this.props.onIncrement()\n            // if (this.props.count === this.props.maxCount) {\n            //     this.setState({\n            //         error:true\n            //     })\n            // }\n        }\n    };\n\n    onReset = () => {\n        this.props.onReset(this.props.minCount)\n        this.setState({\n            // count: this.state.startCount,\n            error: false\n        })\n    };\n\n    onMaxChange = (event) => {\n        const maxValue = event.target.value;\n        this.props.onChangeMaxValue(maxValue)\n        this.props.onGetToSettings()\n        this.setState({\n            // maxCount: Number(maxValue),\n            editMode: true,\n            // count: \"Enter values and press 'set'\",\n            error: true\n        // }, () => {\n\n        }, ()=>{this.incorrectValue()})\n    };\n\n    onMinChange = (event) => {\n        const minValue = event.target.value;\n        this.props.onChangeMinValue(minValue)\n        this.props.onGetToSettings()\n        this.setState({\n            // minCount: Number(minValue.replace(/^0+/, '')), /*max: Number(event.currentTarget.value),*/\n            editMode: true,\n            // count: \"Enter values and press 'set'\",\n            error: true,\n        // }, () => {\n\n        }, () => {this.incorrectValue()})\n    };\n\n    incorrectValue = () => {\n        if (this.props.minCount >= this.props.maxCount || this.props.minCount < 0 || this.props.minCount === '') {\n            this.props.onIncorrectValue()\n            this.setState({\n                // count: \"Incorrect value!\",\n                error: true,\n                editMode: false\n            })\n        }\n    };\n\n    onClickSet = () => {\n        if (this.props.minCount < this.props.maxCount && this.props.minCount >= 0) {\n            this.props.onClickSet(this.props.minCount)\n            this.setState({\n                editMode: false,\n                error: false,\n                // count: this.state.startCount\n            })\n        }\n    };\n\n\n    render = () => {\n        // let disabled = this.props.count === this.props.maxCount;\n\n\n        let redNumber = this.state.error ? 'redNumber borderCount' : 'borderCount'\n        let sizeOfString = typeof (this.props.count) === 'string' ? 'sizeCount borderCount' : 'borderCount'\n        let redCountInput = this.props.count === 'Incorrect value!' ? 'redInput' : ''\n        return (\n            <div className={\"App\"}>\n                <div className={\"settings\"}>\n                    <Settings onMaxChange={this.onMaxChange}\n                              onMinChange={this.onMinChange}\n                              minCount={this.props.minCount}\n                              maxCount={this.props.maxCount}\n                              onClickSet={this.onClickSet}\n                              count={this.props.count}\n                              editMode={this.state.editMode}\n                              redCountInput={redCountInput}/>\n                </div>\n                <div className={\"counter\"}>\n                    <Count incorrectValue={this.incorrectValue}\n                           value={this.props.count}\n                           error={this.state.error}\n                           redNumber={redNumber}\n                           sizeOfString={sizeOfString}/>\n                    <Buttons error={this.state.error}\n                             count={this.props.count}\n                             onPlus={this.onPlus}\n                             onReset={this.onReset}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        count: state.count,\n        minCount: state.minCount,\n        maxCount: state.maxCount,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onIncrement: () => {\n            dispatch(incrementCountAC())\n        },\n        onReset: (startCount) => {\n            dispatch(onResetAC(startCount))\n        },\n        onIncorrectValue: () => {\n            dispatch(onIncorrectValueAC())\n        },\n        onChangeMaxValue: (maxCount) => {\n            dispatch(onChangeMaxValueAC(maxCount))\n        },\n        onChangeMinValue: (minCount) => {\n            dispatch(onChangeMinValueAC(minCount))\n        },\n        onGetToSettings: () => {\n            dispatch(onGetToSettingsAC())\n        },\n        onClickSet: (count) => {\n            dispatch(onClickSetAC(count))\n        }\n    }\n}\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App)\nexport default ConnectedApp;\n","import {createStore} from 'redux'\r\nimport {reducer} from './reducer'\r\n\r\nconst store = createStore(reducer)\r\nexport default store\r\n\r\n\r\n\r\n// window.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}><App /> </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}